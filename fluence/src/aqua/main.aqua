aqua Main

import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-lib/builtin.aqua"
import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-lib/subnet.aqua"
import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-ipfs/ipfs.aqua"

import "./helpers.aqua"
import "./types.aqua"
-- import "./services.aqua"

import Spell, Log from "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/spell/spell_service.aqua"

export run

const REMOTEKUBO = "/ip4/143.176.14.172/tcp/15001"
const SUBNETKUBO = "/dns4/ipfs/tcp/5001"

const CHART = "QmUmydSatHCkcv79TTwcvSZXwrWGFpDF9gjtC66sDSZyq4"

func run(cid: string) -> string:

    d: *TFBar
    res: *string

    logString = (s: string):
        Console.print(s)

    d <<- TFBar( label="", time = "2024-01-01", value = 6481, colour = "#CC0000")
    d <<- TFBar( label="", time = "2024-02-01", value = 8786, colour = "#CC0000")
    d <<- TFBar( label="", time = "2024-03-01", value = 9239, colour = "#CC0000")

    cw = randomFrameWorker()
    Console.print(cw)
    on cw.worker_id! via cw.host_id:
        r = CioKubo.getFolders(SUBNETKUBO, cid, "templates")
        ff = CioKubo.inspectParticleVaultFolder("templates")
        for f <- ff:
            logString(f)
        renderRes <- TFBarChart.render(d)
        if renderRes.success:
            res <<- renderRes.results!
        else:
            res <<- renderRes.error!

    <- res!